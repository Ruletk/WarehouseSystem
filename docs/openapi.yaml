openapi: '3.0.3'


info:
  title: Warehouse Management System - OpenAPI 3.0
  version: 0.1.1
  description: WIP
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html


servers:
  - url: http://localhost/api/v1


tags:
  - name: auth
    description: Authentication
  - name: warehouses
    description: Warehouses
  - name: stock
    description: Stock management
  - name: notifications
    description: Notifications
  - name: admin
    description: Admin panel


paths:
  # Authentication
  /auth/login:
    post:
      tags:
        - auth
      summary: User login
      description: Login user with provided email and password and set cookie with token.
      operationId: authLogin
      requestBody:
        description: Login user.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        "200":
          description: Successful login
          headers:
            Set-Cookie:
              description: Authentication session token
              schema:
                type: string
                format: token
                example: "auth=NANpACT1PrqcW%2Bks9HjE7h1NCxhpyzgEtziqKS1bjETBhbQoN%2BReWpXm37DpjgRX; Max-Age=31536000; Path=/; Expires=Thu, 22 Jan 2026 18:30:55 GMT; HttpOnly"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                invalidSchema:
                  value:
                    code: 400
                    type: error
                    message: "Invalid request data"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                wrongEmailOrPassword:
                  value:
                    code: 404
                    type: error
                    message: "Invalid email or password"

  /auth/register:
    post:
      tags:
        - auth
      summary: User Registration
      description: Register new user and send activation email.
      operationId: authRegistration
      requestBody:
        description: User register.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        "200":
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                invalidSchema:
                  value:
                    code: 400
                    type: error
                    message: "Invalid request data"
        "409":
          description: User already registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                alreadyRegistered:
                  value:
                    code: 409
                    type: error
                    message: "User already exists"

  /auth/logout:
    get:
      tags:
        - auth
      summary: User logout
      description: Logout user and destroy token.
      operationId: authLogout
      security:
        - cookieAuth: [ ]
      responses:
        "200":
          description: Successful logout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  value:
                    code: 200
                    type: success
                    message: "Successfully logged out"

  /auth/reset-password:
    post:
      tags:
        - auth
      summary: Reset password
      description: Request password reset link to be sent to provided email.
      operationId: resetPassword
      requestBody:
        description: Reset password.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
      responses:
        "200":
          description: Password reset
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  value:
                    code: 200
                    type: success
                    message: "Password reset email sent"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                invalidSchema:
                  value:
                    code: 400
                    type: error
                    message: "Invalid request data"

  /auth/change-password/{token}:
    post:
      tags:
        - auth
      summary: Change password
      description: Change password with provided token and new password in request body.
      operationId: changePassword
      parameters:
        - name: token
          in: path
          description: "Reset token"
          required: true
          schema:
            type: string
            format: token
      requestBody:
        description: New password.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
      responses:
        "200":
          description: Password changed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  value:
                    code: 200
                    type: success
                    message: "Password changed"
        "400":
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                invalidEmail:
                  value:
                    code: 400
                    type: error
                    message: "Invalid token"
                invalidSchema:
                  value:
                    code: 400
                    type: error
                    message: "Invalid request data"
                samePassword:
                  value:
                    code: 400
                    type: error
                    message: "New password cannot be the same as the old password"
        "500":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                serverError:
                  value:
                    code: 500
                    type: error
                    message: "Unable to update password"

  /auth/activate/{token}:
    get:
      tags:
        - auth
      summary: Activate account
      description: Activates account with provided token.
      operationId: activateAccount
      parameters:
        - name: token
          in: path
          description: "Activation token"
          required: true
          schema:
            type: string
            format: token
      responses:
        "200":
          description: Account activated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  value:
                    code: 200
                    type: success
                    message: "Account activated"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                invalidEmail:
                  value:
                    code: 400
                    type: error
                    message: "Invalid token"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                notFound:
                  value:
                    code: 404
                    type: error
                    message: "Account not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                serverError:
                  value:
                    code: 500
                    type: error
                    message: "Unable to activate account"

  # Warehouses
  /warehouse/list:
    get:
      tags:
        - warehouses
      summary: Get all warehouses
      description: WIP
      operationId: listWarehouses
      security:
        - cookieAuth: [ ]
      responses:
        "200":
          description: List of warehouses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehousesResponse'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
    post:
      tags:
        - warehouses
      summary: Create new warehouse
      description: WIP
      operationId: createWarehouse
      security:
        - cookieAuth: [ ]
      requestBody:
        description: Create warehouse
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseCreationRequest'
      responses:
        "201":
          description: Created warehouse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseResponse'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'

  /warehouse/{token}:
    get:
      tags:
        - warehouses
      summary: Get warehouse information
      description: Get information about warehouse
      operationId: getWarehouse
      security:
        - cookieAuth: [ ]
      parameters:
        - name: token
          in: path
          description: "Warehouse ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Warehouse information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseResponse'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Warehouse not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                notFound:
                  value:
                    code: 404
                    type: error
                    message: "Warehouse not found"
    put:
      tags:
        - warehouses
      summary: Update warehouse information
      description: Update warehouse information
      operationId: updateWarehouse
      security:
        - cookieAuth: [ ]
      parameters:
        - name: token
          in: path
          description: "Warehouse ID"
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update warehouse
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseCreationRequest'
      responses:
        "200":
          description: Updated warehouse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseResponse'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Warehouse not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                notFound:
                  value:
                    code: 404
                    type: error
                    message: "Warehouse not found"
    delete:
      tags:
        - warehouses
      summary: Delete warehouse
      description: Delete warehouse
      operationId: deleteWarehouse
      security:
        - cookieAuth: [ ]
      parameters:
        - name: token
          in: path
          description: "Warehouse ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Warehouse deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  value:
                    code: 200
                    type: success
                    message: "Warehouse deleted"
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Warehouse not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                notFound:
                  value:
                    code: 404
                    type: error
                    message: "Warehouse not found"


  # Stock
  /stock/warehouse/{warehouse_id}:
    get:
      tags:
        - stock
      summary: Get all stock
      description: WIP
      operationId: listStock
      security:
        - cookieAuth: [ ]
      parameters:
        - name: warehouse_id
          in: path
          description: "Warehouse ID"
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: "Page number"
          required: false
          schema:
            type: integer
            format: int32
            example: 1
        - name: limit
          in: query
          description: "Items per page"
          required: false
          schema:
            type: integer
            format: int32
            example: 10
        - name: sort
          in: query
          description: "Sort by"
          required: false
          schema:
            type: string
            example: "name"
        - name: search
          in: query
          description: "Search by name"
          required: false
          schema:
            type: string
            example: "Apple"
      responses:
        "200":
          description: List of stock
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockResponse'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Warehouse not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                notFound:
                  value:
                    code: 404
                    type: error
                    message: "Warehouse not found"
    post:
      tags:
        - stock
      summary: Add new stock
      description: WIP
      operationId: addStock
      security:
        - cookieAuth: [ ]
      parameters:
        - name: warehouse_id
          in: path
          description: "Warehouse ID"
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Add stock
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockRequest'
      responses:
        "201":
          description: Created stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockResponse'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Warehouse not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                notFound:
                  value:
                    code: 404
                    type: error
                    message: "Warehouse not found"

  /stock/warehouse/{warehouse_id}/stock/{stock_id}:
    get:
      tags:
        - stock
      summary: Get stock information
      description: Get information about stock
      operationId: getStock
      security:
        - cookieAuth: [ ]
      parameters:
        - name: warehouse_id
          in: path
          description: "Warehouse ID"
          required: true
          schema:
            type: integer
            format: int64
        - name: stock_id
          in: path
          description: "Stock ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Stock information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockResponse'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Stock not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                notFound:
                  value:
                    code: 404
                    type: error
                    message: "Stock not found"
    put:
      tags:
        - stock
      summary: Update stock information
      description: Update stock information
      operationId: updateStock
      security:
        - cookieAuth: [ ]
      parameters:
        - name: warehouse_id
          in: path
          description: "Warehouse ID"
          required: true
          schema:
            type: integer
            format: int64
        - name: stock_id
          in: path
          description: "Stock ID"
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update stock
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockRequest'
      responses:
        "200":
          description: Updated stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockResponse'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
    delete:
      tags:
        - stock
      summary: Delete stock
      description: Delete stock
      operationId: deleteStock
      security:
        - cookieAuth: [ ]
      parameters:
        - name: warehouse_id
          in: path
          description: "Warehouse ID"
          required: true
          schema:
            type: integer
            format: int64
        - name: stock_id
          in: path
          description: "Stock ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Stock deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  value:
                    code: 200
                    type: success
                    message: "Stock deleted"
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: Stock not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                notFound:
                  value:
                    code: 404
                    type: error
                    message: "Stock not found"

  # Notifications
  /notifications/history:
    get:
      tags:
        - notifications
      summary: Get notifications history
      description: WIP
      operationId: getNotifications
      security:
        - cookieAuth: [ ]
      parameters:
        - name: page
          in: query
          description: "Page number"
          required: false
          schema:
            type: integer
            format: int32
            example: 1
        - name: limit
          in: query
          description: "Items per page"
          required: false
          schema:
            type: integer
            format: int32
            example: 10
        - name: sort
          in: query
          description: "Sort by"
          required: false
          schema:
            type: string
            example: "created_at"
        - name: search
          in: query
          description: "Search by name"
          required: false
          schema:
            type: string
            example: "Apple"
      responses:
        "200":
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'

  # Admin
  /admin/moderation/users/{id}/ban:
    post:
      tags:
        - admin
      summary: Ban user
      description: WIP
      operationId: banUser
      security:
        - cookieAuth: [ ]
      parameters:
        - name: id
          in: path
          description: "User ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User banned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  value:
                    code: 200
                    type: success
                    message: "User banned"
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                notFound:
                  value:
                    code: 404
                    type: error
                    message: "User not found"

  /admin/moderation/users/{id}/unban:
    post:
      tags:
        - admin
      summary: Unban user
      description: WIP
      operationId: unbanUser
      security:
        - cookieAuth: [ ]
      parameters:
        - name: id
          in: path
          description: "User ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User unbanned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  value:
                    code: 200
                    type: success
                    message: "User unbanned"
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                notFound:
                  value:
                    code: 404
                    type: error
                    message: "User not found"

components:
  schemas:
    AuthRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: user@gmail.com
        password:
          type: string
          format: password
          example: this is super secret password

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          format: token
          example: eyJpdiI6Inhwd3VZTG1PeVR6cG5KVUpUcFBBb
          description: Authentication session token

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"

    TimeInfo:
      type: object
      properties:
        created_at:
          type: integer
          format: int64
          example: 1735120168
        updated_at:
          type: integer
          format: int64
          example: 1735120168

    Location:
      type: object
      properties:
        latitude:
          type: number
          format: double
          example: 51.090709
        longitude:
          type: number
          format: double
          example: 71.418143

    WarehouseResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 12
        name:
          type: string
          example: Central
        location:
          $ref: '#/components/schemas/Location'
        time_info:
          $ref: '#/components/schemas/TimeInfo'

    WarehousesResponse:
      type: array
      items:
        $ref: '#/components/schemas/WarehouseResponse'

    WarehouseCreationRequest:
      type: object
      properties:
        name:
          type: string
          example: Main
        location:
          $ref: '#/components/schemas/Location'

    StockResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 12
        name:
          type: string
          example: "Apple"
        description:
          type: string
          example: "Fresh apples"
        quantity:
          type: integer
          format: int32
          example: 100
        unit_price:
          type: number
          format: double
          example: 1.99
        unit_ammount:
          type: number
          example: 100
        total_price:
          type: number
          format: double
          example: 199.0
        warehouse_id:
          type: integer
          format: int32
          example: 12
        properties:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "Color"
              value:
                type: string
                example: "Red"
        time_info:
          $ref: '#/components/schemas/TimeInfo'

    StockRequest:
      type: object
      properties:
        name:
          type: string
          example: "Apple"
        description:
          type: string
          example: "Fresh apples"
        quantity:
          type: integer
          format: int32
          example: 100
        unit_price:
          type: number
          format: double
          example: 1.99
        unit_ammount:
          type: number
          example: 100
        warehouse_id:
          type: integer
          format: int32
          example: 12
        properties:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "Color"
              value:
                type: string
                example: "Red"

    Notification:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 12
        title:
          type: string
          example: "New stock"
        description:
          type: string
          example: "New stock arrived"
        time_info:
          $ref: '#/components/schemas/TimeInfo'

    ResetPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "myPersonalEmail@example.com"

    ChangePasswordRequest:
      type: object
      properties:
        password:
          type: string
          format: password
          example: "this is super secret new password"

    UnauthorizedResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 401
        type:
          type: string
          example: error
        message:
          type: string
          example: "You are not authenticated"
      xml:
        name: "##default"

    ForbiddenResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 403
        type:
          type: string
          example: error
        message:
          type: string
          example: "You don't have permission to access this resource"
      xml:
        name: "##default"

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: auth


security:
  - cookieAuth: [ ]
