version: '3.7'

services:
  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: db
      TZ: Asia/Aqtobe
    networks:
      - internal
    ports:
      # Should be removed in production
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "db", "-U", "postgres"]
      interval: 1s
      timeout: 1s
      retries: 30
      start_interval: 1s

  backend:
  # Backend will be running on nginx
  # Internal exposed port is 8080
  # No external port is exposed
  # Endpoints is /api/v1/
    image: nginx:1.27.3
    container_name: backend-server
    environment:
      - TZ=Asia/Aqtobe
    networks:
      - internal
    volumes:
      - ./services/backend/nginx.conf:/etc/nginx/nginx.conf
      - ./services/backend/nginx.default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - auth
      - stock
      - warehouse
    #   - db, microservices because nginx will return error if it can't connect to them
    healthcheck:
      test: ["CMD", "systemctl", "status", "nginx"]
      interval: 1s
      timeout: 1s
      retries: 100

  frontend:
  # Frontend will be running on nginx
  # Internal exposed port is 80
  # External exposed port is 80
  ### For development branch it temporarily uses the same image as backend
  ### But later it will be changed to the frontend image (react + nginx)
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
    container_name: frontend-server
    environment:
      - TZ=Asia/Aqtobe
    networks:
      - internal # For internal communication, redirecting requests to backend
    volumes:
      - ./services/frontend/nginx.conf:/etc/nginx/nginx.conf
      - ./services/frontend/nginx.default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "systemctl", "status", "nginx"]
      interval: 1s
      timeout: 1s
      retries: 100

  auth:
    image: auth
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
    container_name: auth
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: postgres
      DB_NAME: db
    networks:
      - internal
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3333/health"]
      interval: 1s
      timeout: 1s
      retries: 100

  stock:
    image: stock
    build:
      context: .
      dockerfile: ./apps/stock/Dockerfile
    container_name: stock
    environment:
      - TZ=Asia/Aqtobe
    networks:
      - internal
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3333/health"]
      interval: 1s
      timeout: 1s
      retries: 100

  warehouse:
    image: warehouse
    build:
      context: .
      dockerfile: ./apps/warehouse/Dockerfile
    container_name: warehouse
    networks:
      - internal
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3333/health"]
      interval: 1s
      timeout: 1s
      retries: 10

networks:
  internal:
    driver: bridge

volumes:
  db_data:
