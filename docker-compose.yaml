version: '3.7'

services:
  backend:
  # Backend will be running on nginx
  # Internal exposed port is 8080
  # No external port is exposed
  # Endpoints is /api/v1/
    image: nginx:1.27.3
    container_name: backend-server
    environment:
      - TZ=Asia/Aqtobe
    networks:
      - internal
    volumes:
      - ./services/backend/nginx.conf:/etc/nginx/nginx.conf
      - ./services/backend/nginx.default.conf:/etc/nginx/conf.d/default.conf
    # depends_on:
    #   - db, microservices because nginx will return error if it can't connect to them
    healthcheck:
      test: ["CMD", "systemctl", "status", "nginx"]
      interval: 1s
      timeout: 1s
      retries: 100

  frontend:
  # Frontend will be running on nginx
  # Internal exposed port is 80
  # External exposed port is 80
  ### For development branch it temporarily uses the same image as backend
  ### But later it will be changed to the frontend image (react + nginx)
    image: nginx:1.27.3
    container_name: frontend-server
    environment:
      - TZ=Asia/Aqtobe
    networks:
      - internal # For internal communication, redirecting requests to backend
    volumes:
      - ./services/frontend/nginx.conf:/etc/nginx/nginx.conf
      - ./services/frontend/nginx.default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "systemctl", "status", "nginx"]
      interval: 1s
      timeout: 1s
      retries: 100
  auth:
    image: auth
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
    container_name: auth
    ports:
      - "3333:3333"
    networks:
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3333/health"]
      interval: 1s
      timeout: 1s
      retries: 10

networks:
  internal:
    driver: bridge

